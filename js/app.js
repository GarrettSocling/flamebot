// Generated by CoffeeScript 1.8.0
var RobotFindingState, RobotLoopState, RobotPhotographingState, RobotSequentialState, RobotState, announceBotEvent, drive, driving, finderBot, finderBotState, mission, returning,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RobotState = (function() {
  function RobotState(name, goals, listener, entering) {
    this.name = name;
    this.goals = goals;
    this.listener = listener;
    this.entering = entering;
    this.behaviors = [];
    this.parent = null;
  }

  RobotState.prototype.addChild = function(state) {
    state.parent = this;
    this.behaviors.push(state);
    return state;
  };

  RobotState.prototype.insertChild = function(state) {
    state.behaviors = this.behaviors;
    this.behaviors = [];
    return this.addChild(state);
  };

  RobotState.prototype.processEvent = function(currentState, event) {
    var newState;
    if (this.parent) {
      newState = this.parent.processEvent(currentState, event);
    }
    if (!newState) {
      newState = this.listener(currentState, event);
      if (newState) {
        newState.entering(currentState);
      }
    }
    return newState;
  };

  RobotState.prototype.findHandler = function(goal) {
    return this.ancestor().findHandlerR(goal);
  };

  RobotState.prototype.findHandlerR = function(goal) {
    var behavior, found, _i, _len, _ref;
    if (__indexOf.call(this.goals, goal) >= 0) {
      return this;
    }
    _ref = this.behaviors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      behavior = _ref[_i];
      found = behavior.findHandlerR(goal);
      if (found) {
        return found;
      }
    }
    return null;
  };

  RobotState.prototype.ancestor = function() {
    if (!this.parent) {
      return this;
    }
    return this.parent.ancestor();
  };

  RobotState.prototype.contains = function(target) {
    var child, _i, _len, _ref;
    if (target === this) {
      return true;
    }
    _ref = this.behaviors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child.contains(target)) {
        return true;
      }
    }
    return false;
  };

  return RobotState;

})();

RobotLoopState = (function(_super) {
  __extends(RobotLoopState, _super);

  function RobotLoopState(name, goals) {
    RobotLoopState.__super__.constructor.call(this, name, goals, function(currentState, event) {
      if (currentState !== this) {
        return null;
      }
      return this.behaviors[0] || this.parent;
    }, function() {
      return null;
    });
  }

  return RobotLoopState;

})(RobotState);

RobotSequentialState = (function(_super) {
  __extends(RobotSequentialState, _super);

  function RobotSequentialState(name, goals) {
    RobotSequentialState.__super__.constructor.call(this, name, goals, function(currentState, event) {
      if (currentState !== this) {
        return null;
      }
      return this.behaviors[this.counter] || this.parent;
    }, function(oldState) {
      return this.counter = this.contains(oldState) ? (this.counter || -1) + 1 : 0;
    });
  }

  return RobotSequentialState;

})(RobotState);

RobotPhotographingState = (function(_super) {
  __extends(RobotPhotographingState, _super);

  function RobotPhotographingState(name, goals, filename) {
    RobotPhotographingState.__super__.constructor.call(this, name, goals, function(currentState, event) {
      return this.parent;
    }, function() {
      var options;
      options = {
        camera: navigator.mozCameras.getListOfCameras()[0]
      };
      return naigator.mozCameras.getCamera(options, function(camera) {
        var poptions;
        poptions = {
          rotation: 90,
          pictureSize: camera.capabilities.pictureSizes[0],
          fileFormat: camera.capabilities.fileFormats[0]
        };
        return camera.takePicture(poptions, function(blob) {
          return navigator.getDeviceStorage('pictures').addNamed(blob, filename);
        });
      });
    });
  }

  return RobotPhotographingState;

})(RobotState);

RobotFindingState = (function(_super) {
  __extends(RobotFindingState, _super);

  function RobotFindingState(name, goals, location, perimeter, compass_variance) {
    this.location = location;
    this.perimeter = perimeter != null ? perimeter : 1;
    this.compass_variance = compass_variance != null ? compass_variance : 20;
    RobotFindingState.__super__.constructor.call(this, name, goals, function(currentState, event) {
      var d, newState;
      if (event.location) {
        this.current_location = event.location.coords;
        if (this.distance(this.current_location, this.location) < this.perimeter) {
          return this.parent;
        }
      }
      if (event.orientation) {
        this.compass_reading = event.orientation.alpha;
      }
      newState = this;
      d = this.correction();
      if (d > this.compass_variance) {
        newState = this.left_turning;
      }
      if (d < -this.compass_variance) {
        newState = this.right_turning;
      }
      if (currentState === newState) {
        return null;
      }
      return newState;
    }, function() {
      return drive(1);
    });
    this.left_turning = this.addChild(new RobotState("" + this.name + ": left-turn", ["left-turn"], function(currentState, event) {
      return null;
    }, function() {
      return drive(5);
    }));
    this.right_turning = this.addChild(new RobotState("" + this.name + ": right-turn", ["right-turn"], function(currentState, event) {
      return null;
    }, function() {
      return drive(6);
    }));
  }

  RobotFindingState.prototype.toRadians = function(r) {
    return r * Math.PI / 180.0;
  };

  RobotFindingState.prototype.toDegrees = function(d) {
    return 180.0 * d / Math.PI;
  };

  RobotFindingState.prototype.correction = function() {
    var bearing;
    if (!this.compass_reading) {
      return 0;
    }
    if (!this.current_location) {
      return 0;
    }
    bearing = this.bearing(this.location, this.current_location);
    return ((360 + this.compass_reading - bearing) % 360) - 180;
  };

  RobotFindingState.prototype.bearing = function(a, b) {
    var lat1, lat2, lon1, lon2, x, y;
    lat1 = this.toRadians(a.latitude);
    lat2 = this.toRadians(b.latitude);
    lon1 = this.toRadians(a.longitude);
    lon2 = this.toRadians(b.longitude);
    y = Math.sin(lon2 - lon1) * Math.cos(lat2);
    x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);
    return this.toDegrees(Math.atan2(y, x));
  };

  RobotFindingState.prototype.distance = function(a, b, r) {
    var d, lat1, lat2, lon1, lon2, n;
    if (r == null) {
      r = 6371000;
    }
    lat1 = this.toRadians(a.latitude);
    lat2 = this.toRadians(b.latitude);
    lon1 = this.toRadians(a.longitude);
    lon2 = this.toRadians(b.longitude);
    n = (Math.pow(Math.sin((lat2 - lat1) / 2), 2)) + Math.cos(lat1) * Math.cos(lat2) * Math.sin((lon2 - lon1) / 2) * Math.sin((lon2 - lon1) / 2);
    d = 2 * r * Math.atan2(Math.sqrt(n), Math.sqrt(1 - n));
    return d;
  };

  return RobotFindingState;

})(RobotState);

finderBot = new RobotState("waiting", ["stop"], function(currentState, event) {
  if (event.button) {
    return currentState.findHandler(event.button);
  }
  return null;
}, function() {
  return drive(0);
});

mission = finderBot.addChild(new RobotSequentialState("stepping", ["go"]));

driving = mission.addChild(new RobotFindingState("goal", ["goal"], {
  latitude: 40.0,
  longitude: -111.0
}));

returning = mission.addChild(new RobotFindingState("home", ["home"], {
  latitude: 41.0,
  longitude: -111.0
}));

finderBotState = finderBot;

announceBotEvent = function(event) {
  var oldState;
  oldState = finderBotState;
  finderBotState = finderBotState.processEvent(finderBotState, event) || finderBotState;
  if (oldState !== finderBotState) {
    return console.log(finderBotState.name);
  }
};

$.ajaxSetup({
  xhr: function() {
    return new window.XMLHttpRequest({
      mozSystem: true
    });
  }
});

drive = function(code, speed) {
  if (speed == null) {
    speed = 8;
  }
  return $.ajax('http://localhost:8080/' + code + speed.toString(16), {
    type: 'GET',
    dataType: 'html',
    success: function(data) {
      return announceBotEvent({
        battery: data
      });
    }
  });
};

$(function() {
  var interval_id, minInterval, motionTimeStamp, motionVector, watch_id;
  $("#go-button").click(function() {
    return announceBotEvent({
      button: "go"
    });
  });
  $("#stop-button").click(function() {
    return announceBotEvent({
      button: "stop"
    });
  });
  $("#escape-button").click(function() {
    return announceBotEvent({
      button: "home"
    });
  });
  motionTimeStamp = 0;
  motionVector = {
    x: 0,
    y: 0,
    z: 0
  };
  minInterval = 1000000;
  window.addEventListener('devicemotion', function(event) {
    var a, interval, m, v;
    a = event.accelerationIncludingGravity;
    m = motionVector;
    v = Math.pow(a.x - m.x, 2) + Math.pow(a.y - m.y, 2) + Math.pow(a.z - m.z, 2);
    interval = event.timeStamp - motionTimeStamp;
    motionVector = {
      x: a.x,
      y: a.y,
      z: a.z
    };
    if (v > 25 && interval > minInterval) {
      console.log("motion event magnitude " + v + " after " + (interval / minInterval) + " intervals");
      announceBotEvent({
        crash: event
      });
      return motionTimeStamp = event.timeStamp;
    }
  });
  window.addEventListener('deviceorientation', function(event) {
    var e;
    e = event;
    return announceBotEvent({
      orientation: event
    });
  }, true);
  watch_id = navigator.geolocation.watchPosition(function(position) {
    return announceBotEvent({
      location: position
    });
  });
  return interval_id = window.setInterval(function() {
    return announceBotEvent({
      timer: 1
    });
  }, 1000);
});

console.log(finderBotState.name);
