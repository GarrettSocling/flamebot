// Generated by CoffeeScript 1.8.0
var RoboRacing, bot, timer_id,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RoboRacing = (function(_super) {
  __extends(RoboRacing, _super);

  function RoboRacing(driver) {
    this.driver = driver;
    this.entering = __bind(this.entering, this);
    this.listener = __bind(this.listener, this);
    RoboRacing.__super__.constructor.call(this, "ready", ["stop"]);
    this.limited = this.addChild(new RoboTiming("limiting", [], 180));
    this.sequence = new RoboSequencing("stepping", ["go"]);
    this.calibrator = new RoboCompassCalibrating("auto compass calibrating", [], this.driver);
    this.limited.addChild(new RoboInterrupting("require calibrated compass", [], this.sequence, this.calibrator, function(bot) {
      return !bot.announcers.compass;
    }));
    this.limited.addChild(new RoboFlagging("storing", ["store"], (function(_this) {
      return function(coords) {
        return _this.sequence.addChild(new RoboFinding("p", [], new RoboSteering(_this.driver), coords));
      };
    })(this)));
    this.driving = this.limited.addChild(new RoboDriving("driving", ["drive"], this.driver, 5));
    this.resetting = this.addChild(new RoboDoing("resetting", ["reset"]));
    this.addChild(new RoboPhotographing("shooting", ["shoot"], "picture1"));
    this.addChild(new RoboCompassCalibrating("compass calibrating", ["calibrate"], this.driver));
    this.addChild(new RoboCompassDisplaying("compass", ["compass"]));
  }

  RoboRacing.prototype.listener = function(currentState, event) {
    if (currentState === this.resetting) {
      return new RoboRacing(this.driver);
    } else {
      return RoboRacing.__super__.listener.call(this, currentState, event);
    }
  };

  RoboRacing.prototype.entering = function(oldState, currentState) {
    if (currentState === this) {
      return this.driver.drive(0);
    }
  };

  return RoboRacing;

})(RoboButtonWatching);

timer_id = null;

bot = new Bot(function(state, event) {
  var eventkey, eventval, html, lastevent;
  console.log("now " + (state.fullName()));
  lastevent = event ? (eventkey = Object.keys(event)[0], eventval = event[eventkey], " " + eventkey + ":" + eventval) : "";
  html = state.ancestor().accordian(state, lastevent);
  clearTimeout(timer_id);
  return timer_id = setTimeout((function(html) {
    return $("#set").html(html).collapsibleset("refresh");
  }), 1000, html);
});

$(function() {
  bot.setState(new RoboRacing(new BigCar(bot, 200)));
  bot.addAnnouncer(new ButtonAnnouncer("button", ["go", "stop", "store", "reset", "drive", "shoot", "calibrate", "compass"]));
  bot.addAnnouncer(new CrashAnnouncer("crash"));
  bot.addAnnouncer(new OrientationAnnouncer("orientation"));
  bot.addAnnouncer(new LocationAnnouncer("location"));
  bot.addAnnouncer(new TimeAnnouncer("time"));
  bot.addAnnouncer(new CorrectionAnnouncer("correction"));
  return bot.addAnnouncer(new BroadcastAnnouncer("broadcasts"));
});
